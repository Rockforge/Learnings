* Image vs Container
** Image
   - Is the application we want to run
   - Binaries of the application we want to run
** Container
   - Is an instance of the image running as a process
   - You can have many containers running off the same image
** Example command: docker container run --publish 8080:80 nginx
*** Note: if you want to run as a daemon then you need to add '--detach'
   1. Downloaded an image 'nginx' from Docker Hub
   2. Started a new container from that image
   3. Opened a port 8080 on the host IP
   4. Routes that traffic to the container IR, port 80
* What happens in a 'docker container run'
  1. Looks for that image locally in image cache, doesn't find anything
  2. Then looks in remote image repository (defaults to Docker Hub)
  3. Downloads the latest version (nginx:latest by default)
  4. Creates a new container based on that image and prepares to start
  5. Give it a virtual IP on a private network inside docker engine
  6. Opens up a port 80 on host and forwards to port 80 in container
  7. Stars container by using the CMD in the image Dockerfile
* Container vs VM
** Additional commands
   - ps aux :: List all processes
   - docker top :: List all processes inside of a container
** Containers aren't mini-VM's
   - They are just processes
   - Limited to what resources they can access
   - Exit when process stops
* What's going on in containers
  - docker container top :: process list in one container
  - docker container inspect :: details of one container config
       - Shows metadata about the container (startup config, volumes, networking)
  - docker container stats :: performance stats of all containers
* Getting a shell inside containers
** No SSH needed
** Commands
  - docker container run -it :: start new contianer interactively
  - docker container exec -it :: run additional command in existing container
  - docker container start -ai :: start a stopped container
* Docker Networks: Concepts
  - Review of docker container run -p
  - For local dev/testing, networks usually "just work"
** Docker Networks Defaults
   - Each container connected to a private virtual network "bridge"
   - Each virtual network routes through NAT firewall on host IP
   - All containers on a virtual network can talk to each other without -p
   - "Batteries included, but removable"
** Commands
   - docker container port <container> :: shows port used by container
* Docker Networks: CLI Management
** Networks
*** --network bridge
    - default docker network which is NAT'ed behind the host IP
*** --network host
    - skips virtual networking but sacrifices security of the container made
*** --network none
    - removes eth0 and only leaves you with localhost interface in container
** Commands
   - docker network ls :: show networks
   - docker network inspect :: inspect a network
   - docker network create --driver :: create a network (default drive is bridge)
   - docker network connect :: attach network to container
        * docker network connect <network> <container> :: Dynamically creates a NIC in a container on an existing virtual network
   - docker network disconnect :: disconnect network to container
        * docker network disconnect <network> <container>
** Example commands ran
   - docker container run -d --name new_nginx --network my_app_net nginx
** Network defaults
   - Create your apps so frontend/backend sit on same Docker network
   - Their inter-communication never leaves host
   - All internally exposed ports closed by default
   - You must manually expose via *-p*, which is better default security
* Docker Networks: DNS
  - Can't really rely on Container ID's since they're dynamic
  - Static IP's and using IP's for talking to containers is an anti-pattern. *AVOID THIS*
** Note: bridge doesn't have DNS server built into it by default
** Docker DNS
   - Built-in DNS server that containers use by default
   - Docker defaults the hostname to the container's name, but you can also set aliases
** Example commands ran
   - docker container exec -it my_nginx ping new_nginx
* Assignment:
** DNS round robin test
   #+begin_src bash
     # Creates two containers of elastic search that both have an alias of 'search'
     docker container run -d --network <network> --network-alias search elasticsearch:2
     docker container run -d --network <network> --network-alias search elasticsearch:2

     # Run a container to check if nslookup search gives instances of elasticsearch
     docker container run --rm --network <network> alpine:3.10 nslookup search

     # Run a container to check if the curl for search changes instance of elasticsearch
     docker container run --rm --network <network> centos:7 curl -s search:9200
   #+end_src
* What's in an Image (and What isn't)
  - App binaries and dependencies
  - Metadata about image data and how to run the image
  - Not a complete OS. No kernel, kernel modules (e.g. drivers)
  - Small as one file
  - Big as a Ubuntu distro
* Using Docker Hub registry images
  - The apt package system for containers
  - Use 'Official' when starting out
  - Alpine is smaller than their Debian counterparts
* Image Layers
