* Decorator Pattern
  - Wrapping classes to add some functionality
  - Doesn't relly on inheritance

* Adapter Pattern
  - An adapter allows you to translate one interface for use with another

* Template Method Pattern
  - We extract methods that are reused into an abstract class
    and differences are deferred into a subclass
  - When there's just enough differences but you don't really know how to do that

* Strategy Pattern
  1. Define a family of algorithms
  2. Encapsulate and make them interchangeable

* Chain of responsibility pattern
  - Passing a request through a chain of handlers/objects
  - Each handler will decide either to process the request or to pass it to the next handler in the chain
  - Remember to define the successor of the current handler by setting the successor
  - Makes use of an abstract class to handle the chaining and having the handlers adhere to a function requirement

* Specification Pattern
  - Allows you to take any kind of business rule and promote it to a first class citizen
  - You can take that logic and wrap it in it's own object
** Note: Not really to be used
